{
	"Input": {
		"scope": "csharp",
		"prefix": "instr",
		"body": [
			"var ${1:val} = Console.ReadLine();"
		],
		"description": "Input string from console"
	},
	"InputNumber": {
		"scope": "csharp",
		"prefix": "innum",
		"body": [
			"var ${1:val} = int.Parse(Console.ReadLine());"
		],
		"description": "Input number from console"
	},
	"InputCharacterArray": {
		"scope": "csharp",
		"prefix": "instrarr",
		"body": [
			"var ${1:val} = Console.ReadLine().Trim().Split(' ');"
		],
		"description": "Input char array from console"
	},
	"InputNumberArray": {
		"scope": "csharp",
		"prefix": "innumarr",
		"body": [
			"var ${1:val} = Console.ReadLine().Trim().Split(' ').Select(int.Parse).ToArray();"
		],
		"description": "Input number array from console"
	},
	"ReverseString": {
		"scope": "csharp",
		"prefix": "revstr",
		"body": [
			"static string Reverse(string str)",
			"{",
			"    var chars = str.ToCharArray();",
			"    for (int i = 0, j = str.Length - 1; i >= 0; i--)",
			"    {",
			"        var tmp = chars[i];",
			"        chars[i] = chars[j];",
			"        chars[j] = tmp;",
			"    }",
			"    return new string(chars);",
			"}"
		],
		"description": "Reverse string"
	},
	"GreatestCommonDivisor": {
		"scope": "csharp",
		"prefix": "gcd",
		"body": [
			"static int GCD(int a, int b) => b == 0 ? a : GCD(b, a % b);"
		],
		"description": "Method of the greatest common divisor number"
	},
	"LeastCommonMultiple": {
		"scope": "csharp",
		"prefix": "lcm",
		"body": [
			"static int LCM(int a, int b) => a * b / GCD(a, b);"
		],
		"description": "Method of the least common multiple number"
	},
	"Enumeration": {
		"scope": "csharp",
		"prefix": "enumeration",
		"body": [
			"public static class Enumeration",
			"{",
			"    private static Dictionary<long, long> _memo = new Dictionary<long, long>();",
			"    private static Dictionary<long, long> _modMemo = new Dictionary<long, long>();",
			"",
			"    public static long Fractorial(long n)",
			"    {",
			"        if (_memo.ContainsKey(n)) return _memo[n];",
			"        if (n < 0) throw new ArgumentException();",
			"        if (n <= 1) return _memo[n] = 1;",
			"        return _memo[n] = n * Fractorial(n - 1);",
			"    }",
			"",
			"    public static long Fractorial(long n, long mod)",
			"    {",
			"        if (_modMemo.ContainsKey(n)) return _modMemo[n];",
			"        if (n < 0) throw new ArgumentException();",
			"        if (n <= 1) return _modMemo[n] = 1;",
			"        return _modMemo[n] = ((n % mod) * Fractorial(n - 1, mod)) % mod;",
			"    }",
			"",
			"    public static long PermutationCount(long n, long k)",
			"    {",
			"        if (n < k) throw new ArgumentException();",
			"        return Fractorial(n) / Fractorial(n - k);",
			"    }",
			"",
			"    public static long PermutationCount(long n, long k, long mod)",
			"    {",
			"        if (n < k) throw new ArgumentException();",
			"        var top = Fractorial(n, mod);",
			"        var bottom = Fractorial(n - k, mod);",
			"        return (top * Power(bottom, mod - 2, mod)) % mod;",
			"    }",
			"",
			"    public static long CombinationCount(long n, long k)",
			"    {",
			"        if (n < k) throw new ArgumentException();",
			"        return Fractorial(n) / (Fractorial(k) * Fractorial(n - k));",
			"    }",
			"",
			"    public static long CombinationCount(long n, long k, long mod)",
			"    {",
			"        if (n < k) throw new ArgumentException();",
			"        var top = Fractorial(n, mod);",
			"        var bottom = (Fractorial(k, mod) * Fractorial(n - k, mod)) % mod;",
			"        return (top * Power(bottom, mod - 2, mod)) % mod;",
			"    }",
			"",
			"    public static long Power(long x, long y, long mod)",
			"    {",
			"        var result = 1L;",
			"        while (y > 0)",
			"        {",
			"            if ((y & 1) == 1) result = ((result % mod) * (x % mod)) % mod;",
			"            x = ((x % mod) * (x % mod)) % mod;",
			"            y >>= 1;",
			"        }",
			"        return result;",
			"    }",
			"}"
		],
		"description": "Utility of enumeration"
	},
	"CumulativeSum": {
		"scope": "csharp",
		"prefix": "cumsum",
		"body": [
			"public static IEnumerable<int> CumulativeSum(this IEnumerable<int> items)",
			"{",
			"    if (items == null) throw new ArgumentNullException();",
			"    var count = items.Count();",
			"    if (count < 1) throw new ArgumentException();",
			"    var array = new int[count + 1];",
			"    array[0] = 0;",
			"    for (var i = 1; i < array.Length; i++)",
			"    {",
			"        var index = i - 1;",
			"        array[i] = items.ElementAt(index) + array[index];",
			"    }",
			"    return array;",
			"}"
		],
		"description": "Method of fractrial count"
	},
	"CountOf": {
		"scope": "csharp",
		"prefix": "countof",
		"body": [
			"static int CountOf(string target, string value)",
			"{",
			"    var editStr = target;",
			"    var count = 0;",
			"    var index = 0;",
			"    while (true)",
			"    {",
			"        index = editStr.IndexOf(value);",
			"        if (index < 0) break;",
			"        count++;",
			"        if (editStr.Length > 1) editStr = editStr.Substring(index + 1);",
			"    }",
			"    return count;",
			"}"
		],
		"description": "Count of a substring in a string"
	},
	"BitFullSearchEnumerable": {
		"scope": "csharp",
		"prefix": "bitfull",
		"body": [
			"static IEnumerable<bool[]> BitFullSearchEnumerable(int n)",
			"{",
			"    if (n < 0) yield return new bool[0];",
			"    for (var i = 0; i < Math.Pow(2, n); i++)",
			"    {",
			"        var array = new bool[n];",
			"        for (var j = 0; j < n; j++)",
			"        {",
			"            var right = (i >> j) & 1;",
			"            array[j] = right == 1;",
			"        }",
			"        yield return array;",
			"    }",
			"}"
		],
		"description": "Reverse string"
	},
	"UnionFind": {
		"scope": "csharp",
		"prefix": "unionfind",
		"body": [
			"public class UnionFind",
			"{",
			"    private int[] _parents;",
			"    private int[] _counts;",
			"    ",
			"    public UnionFind(int length)",
			"    {",
			"        _parents = Enumerable.Range(0, length).ToArray();",
			"        _counts = Enumerable.Repeat(1, length).ToArray();",
			"    }",
			"    ",
			"    public int Find(int x)",
			"    {",
			"        if (_parents[x] == x) return x;",
			"        return _parents[x] = Find(_parents[x]);",
			"    }",
			"    ",
			"    public bool Union(int x, int y)",
			"    {",
			"        var rootX = Find(x);",
			"        var rootY = Find(y);",
			"        if (rootX == rootY) return false;",
			"    ",
			"        if (_counts[rootX] < _counts[rootY])",
			"        {",
			"            var tmp = rootX;",
			"            rootX = rootY;",
			"            rootY = tmp;",
			"        }",
			"        _counts[rootX] += _counts[rootY];",
			"        _parents[rootY] = rootX;",
			"        return true;",
			"    }",
			"    ",
			"    public int Size(int x)",
			"    {",
			"        return _counts[Find(x)];",
			"    }",
			"    ",
			"    public bool IsSame(int x, int y)",
			"    {",
			"        return Find(x) == Find(y);",
			"    }",
			"}"
		],
		"description": "UnionFind tree class"
	},
	"Prime": {
		"scope": "csharp",
		"prefix": "prime",
		"body": [
			"public class Prime",
			"{",
			"    public Dictionary<long, long> Factors => new Dictionary<long, long>(_factors);",
			"    private Dictionary<long, long> _factors;",
			"    public Prime(long n)",
			"    {",
			"        _factors = new Dictionary<long, long>();",
			"        var tmp = n;",
			"        var max = (long)Math.Sqrt(n);",
			"        var p = 2;",
			"        while (p <= max)",
			"        {",
			"            if (tmp % p == 0)",
			"            {",
			"                _factors[p] = 0;",
			"                while (tmp % p == 0)",
			"                {",
			"                    tmp /= p;",
			"                    _factors[p]++;",
			"                }",
			"            }",
			"            p++;",
			"        }",
			"        if (tmp > 1) _factors[tmp] = 1;",
			"    }",
			"    public bool IsPrime(long n) => _factors.ContainsKey(n);",
			"}"
		],
		"description": "Prime number class"
	},
	"Bfs": {
		"scope": "csharp",
		"prefix": "bfs",
		"body": [
			"var graph = new List<int>[${1:n}].Select(x => new List<int>()).ToArray();",
			"for (var i = 0; i < nm[1]; i++)",
			"{",
			"    var ab = Console.ReadLine().Trim().Split(' ').Select(int.Parse).ToArray();",
			"    var a = ab[0] - 1;",
			"    var b = ab[1] - 1;",
			"    graph[a].Add(b);",
			"    graph[b].Add(a);",
			"}",
			"var queue = new Queue<int>();",
			"queue.Enqueue(0);",
			"var depths = Enumerable.Repeat(-1, nm[0]).ToArray();",
			"depths[0] = 0;",
			"while (queue.Any())",
			"{",
			"    var current = queue.Dequeue();",
			"    foreach (var next in graph[current])",
			"    {",
			"        if (depths[next] != -1) continue;",
			"        depths[next] = depths[current] + 1;",
			"        queue.Enqueue(next);",
			"}"
		],
		"description": "breadth first search"
	},
	"For": {
		"scope": "csharp",
		"prefix": "for",
		"body": [
			"for (var ${1:index} = ${2:start}; ${1:index} < ${3:end}; ${1:index}++)",
			"{",
			"    ${4:statement}",
			"}"
		],
		"description": "for statement"
	},
	"Out": {
		"scope": "csharp",
		"prefix": "out",
		"body": [
			"Console.WriteLine(${1:out});"
		],
		"description": "Output"
	},
	"TestMethod": {
		"scope": "csharp",
		"prefix": "testmethod",
		"body": [
			"[TestMethod]",
			"public void TestMethod${1:number}()",
			"{",
			"    var input = @\"\";",
			"    var output = @\"\";",
			"    Tester.InOutTest(() => Program.Solve(), input, output);",
			"}"
		],
		"description": "Output"
	},
}