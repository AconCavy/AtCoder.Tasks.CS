{
	"Scanner": {
		"scope": "csharp",
		"prefix": "scanner",
		"body": [
			"public static class Scanner",
			"{",
			"    private static Queue<string> queue = new Queue<string>();",
			"    public static T Next<T>()",
			"    {",
			"        if (!queue.Any()) foreach (var item in Console.ReadLine().Trim().Split(\" \")) queue.Enqueue(item);",
			"        return (T)Convert.ChangeType(queue.Dequeue(), typeof(T));",
			"    }",
			"    public static T Scan<T>() => Next<T>();",
			"    public static (T1, T2) Scan<T1, T2>() => (Next<T1>(), Next<T2>());",
			"    public static (T1, T2, T3) Scan<T1, T2, T3>() => (Next<T1>(), Next<T2>(), Next<T3>());",
			"    public static (T1, T2, T3, T4) Scan<T1, T2, T3, T4>() => (Next<T1>(), Next<T2>(), Next<T3>(), Next<T4>());",
			"    public static (T1, T2, T3, T4, T5) Scan<T1, T2, T3, T4, T5>() => (Next<T1>(), Next<T2>(), Next<T3>(), Next<T4>(), Next<T5>());",
			"    public static (T1, T2, T3, T4, T5, T6) Scan<T1, T2, T3, T4, T5, T6>() => (Next<T1>(), Next<T2>(), Next<T3>(), Next<T4>(), Next<T5>(), Next<T6>());",
			"    public static IEnumerable<T> ScanEnumerable<T>() => Console.ReadLine().Trim().Split(\" \").Select(x => (T)Convert.ChangeType(x, typeof(T)));",
			"}"
		]
	},
	"Scan1": {
		"scope": "csharp",
		"prefix": "scan1",
		"body": [
			"var ${1:val} = Scanner.Scan<${2:int}>();"
		]
	},
	"Scan2": {
		"scope": "csharp",
		"prefix": "scan2",
		"body": [
			"var (${1:val1}, ${3:val2}) = Scanner.Scan<${2:int}, ${4:int}>();"
		]
	},
	"Scan3": {
		"scope": "csharp",
		"prefix": "scan3",
		"body": [
			"var (${1:val1}, ${3:val2}, ${5:val3}) = Scanner.Scan<${2:int}, ${4:int}, ${6:int}>();"
		]
	},
	"Scan4": {
		"scope": "csharp",
		"prefix": "scan4",
		"body": [
			"var (${1:val1}, ${3:val2}, ${5:val3}, ${7:val4}) = Scanner.Scan<${2:int}, ${4:int}, ${6:int}, ${8:int}>();"
		]
	},
	"Scan5": {
		"scope": "csharp",
		"prefix": "scan5",
		"body": [
			"var (${1:val1}, ${3:val2}, ${5:val3}, ${7:val4}, ${9:val5}) = Scanner.Scan<${2:int}, ${4:int}, ${6:int}, ${8:int}, ${10:int}>();"
		]
	},
	"Scan6": {
		"scope": "csharp",
		"prefix": "scan6",
		"body": [
			"var (${1:val1}, ${3:val2}, ${5:val3}, ${7:val4}, ${9:val5}, ${11:val6}) = Scanner.Scan<${2:int}, ${4:int}, ${6:int}, ${8:int}, ${10:int}, ${12:int}>();"
		]
	},
	"ScanArray": {
		"scope": "csharp",
		"prefix": "scanarray",
		"body": [
			"var ${1:array} = Scanner.ScanEnumerable<${2:int}>().ToArray();"
		]
	},
	"ScanList": {
		"scope": "csharp",
		"prefix": "scanlist",
		"body": [
			"var ${1:list} = Scanner.ScanEnumerable<${2:int}>().ToList();"
		]
	},
	"GreatestCommonDivisor": {
		"scope": "csharp",
		"prefix": [
			"gcd",
			"greatestcommondivisor"
		],
		"body": [
			"private static long GreatestCommonDivisor(long a, long b)",
			"{",
			"    while (true)",
			"    {",
			"        if (b == 0) return a;",
			"        (a, b) = (b, a % b);",
			"    }",
			"}"
		]
	},
	"LeastCommonMultiple": {
		"scope": "csharp",
		"prefix": [
			"lcm",
			"leastcommonmultiple"
		],
		"body": [
			"public static long LeastCommonMultiple(long a, long b) => a * b / GreatestCommonDivisor(a, b);"
		]
	},
	"Enumeration": {
		"scope": "csharp",
		"prefix": "enumeration",
		"body": [
			"public static class Enumeration",
			"{",
			"    private static Dictionary<long, long> _memo = new Dictionary<long, long> { { 0, 1 }, { 1, 1 } };",
			"    private static Dictionary<long, long> _modMemo = new Dictionary<long, long> { { 0, 1 }, { 1, 1 } };",
			"    private static long _max = 1;",
			"    private static long _modMax = 1;",
			"",
			"    public static long Factorial(long n)",
			"    {",
			"        if (_memo.ContainsKey(n)) return _memo[n];",
			"        if (n < 0) throw new ArgumentException();",
			"        var val = _memo[_max];",
			"        for (var i = _max + 1; i <= n; i++)",
			"        {",
			"            val *= i;",
			"            _memo[i] = val;",
			"        }",
			"        _max = n;",
			"        return _memo[n];",
			"    }",
			"",
			"    public static long Factorial(long n, long mod)",
			"    {",
			"        if (_modMemo.ContainsKey(n)) return _modMemo[n];",
			"        if (n < 0) throw new ArgumentException();",
			"        var val = _modMemo[_modMax];",
			"        for (var i = _modMax + 1; i <= n; i++)",
			"        {",
			"            val *= i % mod;",
			"            val %= mod;",
			"            _modMemo[i] = val;",
			"        }",
			"        _modMax = n;",
			"        return _modMemo[n];",
			"    }",
			"",
			"    public static long PermutationCount(long n, long k)",
			"    {",
			"        if (n < k) throw new ArgumentException();",
			"        return Factorial(n) / Factorial(n - k);",
			"        // no memo",
			"        // var ret = 1L;",
			"        // for (var i = 0; i < k; i++) ret *= (n - i);",
			"        // return ret;",
			"    }",
			"",
			"    public static long PermutationCount(long n, long k, long mod)",
			"    {",
			"        if (n < k) throw new ArgumentException();",
			"        var top = Factorial(n, mod);",
			"        var bottom = Factorial(n - k, mod);",
			"        return (top * Power(bottom, mod - 2, mod)) % mod;",
			"        // no memo",
			"        // var ret = 1L;",
			"        // for (var i = 0; i < k; i++) ret = (ret * (n - i) % mod) % mod;",
			"        // return ret;",
			"    }",
			"",
			"    public static long CombinationCount(long n, long k)",
			"    {",
			"        if (n < k) throw new ArgumentException();",
			"        k = Math.Min(k, n - k);",
			"        return Factorial(n) / (Factorial(k) * Factorial(n - k));",
			"        // no memo",
			"        // return PermutationCount(n, k) / PermutationCount(k, k);",
			"    }",
			"",
			"    public static long CombinationCount(long n, long k, long mod)",
			"    {",
			"        if (n < k) throw new ArgumentException();",
			"        k = Math.Min(k, n - k);",
			"        var top = Factorial(n, mod);",
			"        var bottom = (Factorial(k, mod) * Factorial(n - k, mod)) % mod;",
			"        // no memo",
			"        // var top = PermutationCount(n, k, mod);",
			"        // var bottom = PermutationCount(k, k, mod);",
			"        return (top * Power(bottom, mod - 2, mod)) % mod;",
			"    }",
			"",
			"    public static long Power(long x, long y, long mod)",
			"    {",
			"        var result = 1L;",
			"        while (y > 0)",
			"        {",
			"            var xmod = x % mod;",
			"            if ((y & 1) == 1) result = (result * xmod) % mod;",
			"            x = (xmod * xmod) % mod;",
			"            y >>= 1;",
			"        }",
			"        return result;",
			"    }",
			"}"
		]
	},
	"CountOf": {
		"scope": "csharp",
		"prefix": "countof",
		"body": [
			"static int CountOf(string target, string value)",
			"{",
			"    var editStr = target;",
			"    var count = 0;",
			"    var index = 0;",
			"    while (true)",
			"    {",
			"        index = editStr.IndexOf(value);",
			"        if (index < 0) break;",
			"        count++;",
			"        if (editStr.Length > 1) editStr = editStr.Substring(index + 1);",
			"    }",
			"    return count;",
			"}"
		]
	},
	"Graph": {
		"scope": "csharp",
		"prefix": "graph",
		"body": [
			"var G = new List<${2:int}>[${1:N}].Select(x => new List<${2}>()).ToArray();",
			"for (var i = 0; i < ${3:M}; i++)",
			"{",
			"    var (${4:a}, ${5:b}) = Scanner.Scan<${2}, ${2}>();",
			"    G[--${4}].Add(--${5});",
			"    G[${5}].Add(${4});",
			"}"
		]
	},
	"Bfs": {
		"scope": "csharp",
		"prefix": "bfs",
		"body": [
			"var queue = new Queue<int>();",
			"queue.Enqueue(0);",
			"var depths = Enumerable.Repeat(-1, ${1:N}).ToArray();",
			"depths[0] = 0;",
			"while (queue.Any())",
			"{",
			"    var current = queue.Dequeue();",
			"    foreach (var next in G[current])",
			"    {",
			"        if (depths[next] != -1) continue;",
			"        depths[next] = depths[current] + 1;",
			"        queue.Enqueue(next);",
			"    }",
			"}"
		]
	},
	"TestMethod": {
		"scope": "csharp",
		"prefix": "testmethod",
		"body": [
			"[TestMethod]",
			"public void TestMethod${1:number}()",
			"{",
			"    const string input = @\"\";",
			"    const string output = @\"\";",
			"    Tester.InOutTest(() => Tasks.${2:task}.Solve(), input, output);",
			"}"
		]
	},
}